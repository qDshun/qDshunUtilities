// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using qDshunUtilities.EF;

#nullable disable

namespace qDshunUtilities.EF.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250508203421_UpdatedObjectField")]
    partial class UpdatedObjectField
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("qDshunUtilities.EF.Entities.ChatMessageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WorldUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorldUserId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("qDshunUtilities.EF.Entities.LootItemEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("CountExpression")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LootSourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rarity")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("LootSourceId");

                    b.ToTable("LootItems");
                });

            modelBuilder.Entity("qDshunUtilities.EF.Entities.LootSourceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WorldId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorldId");

                    b.ToTable("LootSources");
                });

            modelBuilder.Entity("qDshunUtilities.EF.Entities.ObjectFieldEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TemplatedWorldObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("TemplatedWorldObjectId");

                    b.ToTable("ObjectFields");
                });

            modelBuilder.Entity("qDshunUtilities.EF.Entities.PermissionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("qDshunUtilities.EF.Entities.TemplateEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HTMLTemplate")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("qDshunUtilities.EF.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("qDshunUtilities.EF.Entities.WorldEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Worlds");
                });

            modelBuilder.Entity("qDshunUtilities.EF.Entities.WorldObjectPermissionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorldObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorldUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("WorldObjectId");

                    b.HasIndex("WorldUserId");

                    b.ToTable("WorldObjectPermissions");
                });

            modelBuilder.Entity("qDshunUtilities.EF.Entities.WorldObjects.WorldObjectEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PreviewImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PreviousId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorldId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("PreviousId");

                    b.HasIndex("WorldId");

                    b.ToTable("WorldObjects");

                    b.HasDiscriminator().HasValue("WorldObjectEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("qDshunUtilities.EF.Entities.WorldUserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorldId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WorldId");

                    b.ToTable("WorldUsers");
                });

            modelBuilder.Entity("qDshunUtilities.EF.Entities.WorldObjects.FolderEntity", b =>
                {
                    b.HasBaseType("qDshunUtilities.EF.Entities.WorldObjects.WorldObjectEntity");

                    b.HasDiscriminator().HasValue("FolderEntity");
                });

            modelBuilder.Entity("qDshunUtilities.EF.Entities.WorldObjects.TemplatedWorldObjectEntity", b =>
                {
                    b.HasBaseType("qDshunUtilities.EF.Entities.WorldObjects.WorldObjectEntity");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("TemplateId");

                    b.HasDiscriminator().HasValue("TemplatedWorldObjectEntity");
                });

            modelBuilder.Entity("qDshunUtilities.EF.Entities.WorldObjects.CharacterSheetEntity", b =>
                {
                    b.HasBaseType("qDshunUtilities.EF.Entities.WorldObjects.TemplatedWorldObjectEntity");

                    b.Property<string>("TokenImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("CharacterSheetEntity");
                });

            modelBuilder.Entity("qDshunUtilities.EF.Entities.WorldObjects.HandoutEntity", b =>
                {
                    b.HasBaseType("qDshunUtilities.EF.Entities.WorldObjects.TemplatedWorldObjectEntity");

                    b.HasDiscriminator().HasValue("HandoutEntity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("qDshunUtilities.EF.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("qDshunUtilities.EF.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("qDshunUtilities.EF.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("qDshunUtilities.EF.Entities.ChatMessageEntity", b =>
                {
                    b.HasOne("qDshunUtilities.EF.Entities.WorldUserEntity", "WorldUser")
                        .WithMany()
                        .HasForeignKey("WorldUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorldUser");
                });

            modelBuilder.Entity("qDshunUtilities.EF.Entities.LootItemEntity", b =>
                {
                    b.HasOne("qDshunUtilities.EF.Entities.LootSourceEntity", "LootSource")
                        .WithMany("LootItems")
                        .HasForeignKey("LootSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LootSource");
                });

            modelBuilder.Entity("qDshunUtilities.EF.Entities.LootSourceEntity", b =>
                {
                    b.HasOne("qDshunUtilities.EF.Entities.WorldEntity", "World")
                        .WithMany("LootSources")
                        .HasForeignKey("WorldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("World");
                });

            modelBuilder.Entity("qDshunUtilities.EF.Entities.ObjectFieldEntity", b =>
                {
                    b.HasOne("qDshunUtilities.EF.Entities.ObjectFieldEntity", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("qDshunUtilities.EF.Entities.WorldObjects.TemplatedWorldObjectEntity", "TemplatedWorldObject")
                        .WithMany("ObjectFields")
                        .HasForeignKey("TemplatedWorldObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("TemplatedWorldObject");
                });

            modelBuilder.Entity("qDshunUtilities.EF.Entities.WorldObjectPermissionEntity", b =>
                {
                    b.HasOne("qDshunUtilities.EF.Entities.PermissionEntity", "Permission")
                        .WithMany("WorldObjectPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("qDshunUtilities.EF.Entities.WorldObjects.WorldObjectEntity", "WorldObject")
                        .WithMany("WorldObjectPermissions")
                        .HasForeignKey("WorldObjectId");

                    b.HasOne("qDshunUtilities.EF.Entities.WorldUserEntity", "WorldUser")
                        .WithMany("WorldObjectPermissions")
                        .HasForeignKey("WorldUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("WorldObject");

                    b.Navigation("WorldUser");
                });

            modelBuilder.Entity("qDshunUtilities.EF.Entities.WorldObjects.WorldObjectEntity", b =>
                {
                    b.HasOne("qDshunUtilities.EF.Entities.WorldObjects.WorldObjectEntity", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("qDshunUtilities.EF.Entities.WorldObjects.WorldObjectEntity", "Previous")
                        .WithMany()
                        .HasForeignKey("PreviousId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("qDshunUtilities.EF.Entities.WorldEntity", "World")
                        .WithMany("WorldObjects")
                        .HasForeignKey("WorldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Previous");

                    b.Navigation("World");
                });

            modelBuilder.Entity("qDshunUtilities.EF.Entities.WorldUserEntity", b =>
                {
                    b.HasOne("qDshunUtilities.EF.Entities.UserEntity", "User")
                        .WithMany("WorldUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("qDshunUtilities.EF.Entities.WorldEntity", "World")
                        .WithMany("WorldUsers")
                        .HasForeignKey("WorldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("World");
                });

            modelBuilder.Entity("qDshunUtilities.EF.Entities.WorldObjects.TemplatedWorldObjectEntity", b =>
                {
                    b.HasOne("qDshunUtilities.EF.Entities.TemplateEntity", "Template")
                        .WithMany("TemplatedWorldObjects")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("qDshunUtilities.EF.Entities.LootSourceEntity", b =>
                {
                    b.Navigation("LootItems");
                });

            modelBuilder.Entity("qDshunUtilities.EF.Entities.PermissionEntity", b =>
                {
                    b.Navigation("WorldObjectPermissions");
                });

            modelBuilder.Entity("qDshunUtilities.EF.Entities.TemplateEntity", b =>
                {
                    b.Navigation("TemplatedWorldObjects");
                });

            modelBuilder.Entity("qDshunUtilities.EF.Entities.UserEntity", b =>
                {
                    b.Navigation("WorldUsers");
                });

            modelBuilder.Entity("qDshunUtilities.EF.Entities.WorldEntity", b =>
                {
                    b.Navigation("LootSources");

                    b.Navigation("WorldObjects");

                    b.Navigation("WorldUsers");
                });

            modelBuilder.Entity("qDshunUtilities.EF.Entities.WorldObjects.WorldObjectEntity", b =>
                {
                    b.Navigation("WorldObjectPermissions");
                });

            modelBuilder.Entity("qDshunUtilities.EF.Entities.WorldUserEntity", b =>
                {
                    b.Navigation("WorldObjectPermissions");
                });

            modelBuilder.Entity("qDshunUtilities.EF.Entities.WorldObjects.TemplatedWorldObjectEntity", b =>
                {
                    b.Navigation("ObjectFields");
                });
#pragma warning restore 612, 618
        }
    }
}
